# Generated by ffi_gen. Please do not change this file by hand.

require 'ffi'

module Libudev
  extend FFI::Library
  ffi_lib "udev"
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  # udev - library context
  # 
  # reads the udev config and system environment
  # allows custom logging
  module UdevWrappers
    # @return [Udev] 
    def ref()
      Udev.new Libudev.udev_ref(self)
    end
    
    # @return [Udev] 
    def unref()
      Udev.new Libudev.udev_unref(self)
    end
    
    # @param [FFI::Pointer(*)] log_fn 
    # @return [nil] 
    def set_log_fn(log_fn)
      Libudev.udev_set_log_fn(self, log_fn)
    end
    
    # @return [Integer] 
    def get_log_priority()
      Libudev.udev_get_log_priority(self)
    end
    
    # @param [Integer] priority 
    # @return [nil] 
    def set_log_priority(priority)
      Libudev.udev_set_log_priority(self, priority)
    end
    
    # @return [FFI::Pointer(*Void)] 
    def get_userdata()
      Libudev.udev_get_userdata(self)
    end
    
    # @param [FFI::Pointer(*Void)] userdata 
    # @return [nil] 
    def set_userdata(userdata)
      Libudev.udev_set_userdata(self, userdata)
    end
    
    # @param [String] syspath 
    # @return [UdevDevice] 
    def device_new_from_syspath(syspath)
      UdevDevice.new Libudev.udev_device_new_from_syspath(self, syspath)
    end
    
    # @param [Integer] type 
    # @param [Integer] devnum 
    # @return [UdevDevice] 
    def device_new_from_devnum(type, devnum)
      UdevDevice.new Libudev.udev_device_new_from_devnum(self, type, devnum)
    end
    
    # @param [String] subsystem 
    # @param [String] sysname 
    # @return [UdevDevice] 
    def device_new_from_subsystem_sysname(subsystem, sysname)
      UdevDevice.new Libudev.udev_device_new_from_subsystem_sysname(self, subsystem, sysname)
    end
    
    # @param [String] id 
    # @return [UdevDevice] 
    def device_new_from_device_id(id)
      UdevDevice.new Libudev.udev_device_new_from_device_id(self, id)
    end
    
    # @return [UdevDevice] 
    def device_new_from_environment()
      UdevDevice.new Libudev.udev_device_new_from_environment(self)
    end
    
    # @param [String] name 
    # @return [UdevMonitor] 
    def monitor_new_from_netlink(name)
      UdevMonitor.new Libudev.udev_monitor_new_from_netlink(self, name)
    end
    
    # @return [UdevEnumerate] 
    def enumerate_new()
      UdevEnumerate.new Libudev.udev_enumerate_new(self)
    end
    
    # @return [UdevQueue] 
    def queue_new()
      UdevQueue.new Libudev.udev_queue_new(self)
    end
    
    # @return [UdevHwdb] 
    def hwdb_new()
      UdevHwdb.new Libudev.udev_hwdb_new(self)
    end
  end
  
  class Udev < FFI::Struct
    include UdevWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # @method udev_ref(udev)
  # @param [Udev] udev 
  # @return [Udev] 
  # @scope class
  attach_function :udev_ref, :udev_ref, [Udev], Udev
  
  # (Not documented)
  # 
  # @method udev_unref(udev)
  # @param [Udev] udev 
  # @return [Udev] 
  # @scope class
  attach_function :udev_unref, :udev_unref, [Udev], Udev
  
  # (Not documented)
  # 
  # @method udev_new()
  # @return [Udev] 
  # @scope class
  attach_function :udev_new, :udev_new, [], Udev
  
  # (Not documented)
  # 
  # @method udev_set_log_fn(udev, log_fn)
  # @param [Udev] udev 
  # @param [FFI::Pointer(*)] log_fn 
  # @return [nil] 
  # @scope class
  attach_function :udev_set_log_fn, :udev_set_log_fn, [Udev, :pointer], :void
  
  # (Not documented)
  # 
  # @method udev_get_log_priority(udev)
  # @param [Udev] udev 
  # @return [Integer] 
  # @scope class
  attach_function :udev_get_log_priority, :udev_get_log_priority, [Udev], :int
  
  # (Not documented)
  # 
  # @method udev_set_log_priority(udev, priority)
  # @param [Udev] udev 
  # @param [Integer] priority 
  # @return [nil] 
  # @scope class
  attach_function :udev_set_log_priority, :udev_set_log_priority, [Udev, :int], :void
  
  # (Not documented)
  # 
  # @method udev_get_userdata(udev)
  # @param [Udev] udev 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  attach_function :udev_get_userdata, :udev_get_userdata, [Udev], :pointer
  
  # (Not documented)
  # 
  # @method udev_set_userdata(udev, userdata)
  # @param [Udev] udev 
  # @param [FFI::Pointer(*Void)] userdata 
  # @return [nil] 
  # @scope class
  attach_function :udev_set_userdata, :udev_set_userdata, [Udev, :pointer], :void
  
  # udev_list
  # 
  # access to libudev generated lists
  module UdevListEntryWrappers
    # @return [UdevListEntry] 
    def get_next()
      UdevListEntry.new Libudev.udev_list_entry_get_next(self)
    end
    
    # @param [String] name 
    # @return [UdevListEntry] 
    def get_by_name(name)
      UdevListEntry.new Libudev.udev_list_entry_get_by_name(self, name)
    end
    
    # @return [String] 
    def get_name()
      Libudev.udev_list_entry_get_name(self)
    end
    
    # @return [String] 
    def get_value()
      Libudev.udev_list_entry_get_value(self)
    end
  end
  
  class UdevListEntry < FFI::Struct
    include UdevListEntryWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # @method udev_list_entry_get_next(list_entry)
  # @param [UdevListEntry] list_entry 
  # @return [UdevListEntry] 
  # @scope class
  attach_function :udev_list_entry_get_next, :udev_list_entry_get_next, [UdevListEntry], UdevListEntry
  
  # (Not documented)
  # 
  # @method udev_list_entry_get_by_name(list_entry, name)
  # @param [UdevListEntry] list_entry 
  # @param [String] name 
  # @return [UdevListEntry] 
  # @scope class
  attach_function :udev_list_entry_get_by_name, :udev_list_entry_get_by_name, [UdevListEntry, :string], UdevListEntry
  
  # (Not documented)
  # 
  # @method udev_list_entry_get_name(list_entry)
  # @param [UdevListEntry] list_entry 
  # @return [String] 
  # @scope class
  attach_function :udev_list_entry_get_name, :udev_list_entry_get_name, [UdevListEntry], :string
  
  # (Not documented)
  # 
  # @method udev_list_entry_get_value(list_entry)
  # @param [UdevListEntry] list_entry 
  # @return [String] 
  # @scope class
  attach_function :udev_list_entry_get_value, :udev_list_entry_get_value, [UdevListEntry], :string
  
  # udev_device
  # 
  # access to sysfs/kernel devices
  module UdevDeviceWrappers
    # @return [UdevDevice] 
    def ref()
      UdevDevice.new Libudev.udev_device_ref(self)
    end
    
    # @return [UdevDevice] 
    def unref()
      UdevDevice.new Libudev.udev_device_unref(self)
    end
    
    # @return [Udev] 
    def get_udev()
      Udev.new Libudev.udev_device_get_udev(self)
    end
    
    # @return [UdevDevice] 
    def get_parent()
      UdevDevice.new Libudev.udev_device_get_parent(self)
    end
    
    # @param [String] subsystem 
    # @param [String] devtype 
    # @return [UdevDevice] 
    def get_parent_with_subsystem_devtype(subsystem, devtype)
      UdevDevice.new Libudev.udev_device_get_parent_with_subsystem_devtype(self, subsystem, devtype)
    end
    
    # @return [String] 
    def get_devpath()
      Libudev.udev_device_get_devpath(self)
    end
    
    # @return [String] 
    def get_subsystem()
      Libudev.udev_device_get_subsystem(self)
    end
    
    # @return [String] 
    def get_devtype()
      Libudev.udev_device_get_devtype(self)
    end
    
    # @return [String] 
    def get_syspath()
      Libudev.udev_device_get_syspath(self)
    end
    
    # @return [String] 
    def get_sysname()
      Libudev.udev_device_get_sysname(self)
    end
    
    # @return [String] 
    def get_sysnum()
      Libudev.udev_device_get_sysnum(self)
    end
    
    # @return [String] 
    def get_devnode()
      Libudev.udev_device_get_devnode(self)
    end
    
    # @return [Integer] 
    def get_is_initialized()
      Libudev.udev_device_get_is_initialized(self)
    end
    
    # @return [UdevListEntry] 
    def get_devlinks_list_entry()
      UdevListEntry.new Libudev.udev_device_get_devlinks_list_entry(self)
    end
    
    # @return [UdevListEntry] 
    def get_properties_list_entry()
      UdevListEntry.new Libudev.udev_device_get_properties_list_entry(self)
    end
    
    # @return [UdevListEntry] 
    def get_tags_list_entry()
      UdevListEntry.new Libudev.udev_device_get_tags_list_entry(self)
    end
    
    # @return [UdevListEntry] 
    def get_sysattr_list_entry()
      UdevListEntry.new Libudev.udev_device_get_sysattr_list_entry(self)
    end
    
    # @param [String] key 
    # @return [String] 
    def get_property_value(key)
      Libudev.udev_device_get_property_value(self, key)
    end
    
    # @return [String] 
    def get_driver()
      Libudev.udev_device_get_driver(self)
    end
    
    # @return [Integer] 
    def get_devnum()
      Libudev.udev_device_get_devnum(self)
    end
    
    # @return [String] 
    def get_action()
      Libudev.udev_device_get_action(self)
    end
    
    # @return [Integer] 
    def get_seqnum()
      Libudev.udev_device_get_seqnum(self)
    end
    
    # @return [Integer] 
    def get_usec_since_initialized()
      Libudev.udev_device_get_usec_since_initialized(self)
    end
    
    # @param [String] sysattr 
    # @return [String] 
    def get_sysattr_value(sysattr)
      Libudev.udev_device_get_sysattr_value(self, sysattr)
    end
    
    # @param [String] sysattr 
    # @param [String] value 
    # @return [Integer] 
    def set_sysattr_value(sysattr, value)
      Libudev.udev_device_set_sysattr_value(self, sysattr, value)
    end
    
    # @param [String] tag 
    # @return [Integer] 
    def has_tag(tag)
      Libudev.udev_device_has_tag(self, tag)
    end
  end
  
  class UdevDevice < FFI::Struct
    include UdevDeviceWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # @method udev_device_ref(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [UdevDevice] 
  # @scope class
  attach_function :udev_device_ref, :udev_device_ref, [UdevDevice], UdevDevice
  
  # (Not documented)
  # 
  # @method udev_device_unref(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [UdevDevice] 
  # @scope class
  attach_function :udev_device_unref, :udev_device_unref, [UdevDevice], UdevDevice
  
  # (Not documented)
  # 
  # @method udev_device_get_udev(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [Udev] 
  # @scope class
  attach_function :udev_device_get_udev, :udev_device_get_udev, [UdevDevice], Udev
  
  # (Not documented)
  # 
  # @method udev_device_new_from_syspath(udev, syspath)
  # @param [Udev] udev 
  # @param [String] syspath 
  # @return [UdevDevice] 
  # @scope class
  attach_function :udev_device_new_from_syspath, :udev_device_new_from_syspath, [Udev, :string], UdevDevice
  
  # (Not documented)
  # 
  # @method udev_device_new_from_devnum(udev, type, devnum)
  # @param [Udev] udev 
  # @param [Integer] type 
  # @param [Integer] devnum 
  # @return [UdevDevice] 
  # @scope class
  attach_function :udev_device_new_from_devnum, :udev_device_new_from_devnum, [Udev, :char, :ulong], UdevDevice
  
  # (Not documented)
  # 
  # @method udev_device_new_from_subsystem_sysname(udev, subsystem, sysname)
  # @param [Udev] udev 
  # @param [String] subsystem 
  # @param [String] sysname 
  # @return [UdevDevice] 
  # @scope class
  attach_function :udev_device_new_from_subsystem_sysname, :udev_device_new_from_subsystem_sysname, [Udev, :string, :string], UdevDevice
  
  # (Not documented)
  # 
  # @method udev_device_new_from_device_id(udev, id)
  # @param [Udev] udev 
  # @param [String] id 
  # @return [UdevDevice] 
  # @scope class
  attach_function :udev_device_new_from_device_id, :udev_device_new_from_device_id, [Udev, :string], UdevDevice
  
  # (Not documented)
  # 
  # @method udev_device_new_from_environment(udev)
  # @param [Udev] udev 
  # @return [UdevDevice] 
  # @scope class
  attach_function :udev_device_new_from_environment, :udev_device_new_from_environment, [Udev], UdevDevice
  
  # udev_device_get_parent_*() does not take a reference on the returned device, it is automatically unref'd with the parent
  # 
  # @method udev_device_get_parent(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [UdevDevice] 
  # @scope class
  attach_function :udev_device_get_parent, :udev_device_get_parent, [UdevDevice], UdevDevice
  
  # (Not documented)
  # 
  # @method udev_device_get_parent_with_subsystem_devtype(udev_device, subsystem, devtype)
  # @param [UdevDevice] udev_device 
  # @param [String] subsystem 
  # @param [String] devtype 
  # @return [UdevDevice] 
  # @scope class
  attach_function :udev_device_get_parent_with_subsystem_devtype, :udev_device_get_parent_with_subsystem_devtype, [UdevDevice, :string, :string], UdevDevice
  
  # retrieve device properties
  # 
  # @method udev_device_get_devpath(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [String] 
  # @scope class
  attach_function :udev_device_get_devpath, :udev_device_get_devpath, [UdevDevice], :string
  
  # (Not documented)
  # 
  # @method udev_device_get_subsystem(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [String] 
  # @scope class
  attach_function :udev_device_get_subsystem, :udev_device_get_subsystem, [UdevDevice], :string
  
  # (Not documented)
  # 
  # @method udev_device_get_devtype(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [String] 
  # @scope class
  attach_function :udev_device_get_devtype, :udev_device_get_devtype, [UdevDevice], :string
  
  # (Not documented)
  # 
  # @method udev_device_get_syspath(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [String] 
  # @scope class
  attach_function :udev_device_get_syspath, :udev_device_get_syspath, [UdevDevice], :string
  
  # (Not documented)
  # 
  # @method udev_device_get_sysname(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [String] 
  # @scope class
  attach_function :udev_device_get_sysname, :udev_device_get_sysname, [UdevDevice], :string
  
  # (Not documented)
  # 
  # @method udev_device_get_sysnum(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [String] 
  # @scope class
  attach_function :udev_device_get_sysnum, :udev_device_get_sysnum, [UdevDevice], :string
  
  # (Not documented)
  # 
  # @method udev_device_get_devnode(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [String] 
  # @scope class
  attach_function :udev_device_get_devnode, :udev_device_get_devnode, [UdevDevice], :string
  
  # (Not documented)
  # 
  # @method udev_device_get_is_initialized(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [Integer] 
  # @scope class
  attach_function :udev_device_get_is_initialized, :udev_device_get_is_initialized, [UdevDevice], :int
  
  # (Not documented)
  # 
  # @method udev_device_get_devlinks_list_entry(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [UdevListEntry] 
  # @scope class
  attach_function :udev_device_get_devlinks_list_entry, :udev_device_get_devlinks_list_entry, [UdevDevice], UdevListEntry
  
  # (Not documented)
  # 
  # @method udev_device_get_properties_list_entry(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [UdevListEntry] 
  # @scope class
  attach_function :udev_device_get_properties_list_entry, :udev_device_get_properties_list_entry, [UdevDevice], UdevListEntry
  
  # (Not documented)
  # 
  # @method udev_device_get_tags_list_entry(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [UdevListEntry] 
  # @scope class
  attach_function :udev_device_get_tags_list_entry, :udev_device_get_tags_list_entry, [UdevDevice], UdevListEntry
  
  # (Not documented)
  # 
  # @method udev_device_get_sysattr_list_entry(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [UdevListEntry] 
  # @scope class
  attach_function :udev_device_get_sysattr_list_entry, :udev_device_get_sysattr_list_entry, [UdevDevice], UdevListEntry
  
  # (Not documented)
  # 
  # @method udev_device_get_property_value(udev_device, key)
  # @param [UdevDevice] udev_device 
  # @param [String] key 
  # @return [String] 
  # @scope class
  attach_function :udev_device_get_property_value, :udev_device_get_property_value, [UdevDevice, :string], :string
  
  # (Not documented)
  # 
  # @method udev_device_get_driver(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [String] 
  # @scope class
  attach_function :udev_device_get_driver, :udev_device_get_driver, [UdevDevice], :string
  
  # (Not documented)
  # 
  # @method udev_device_get_devnum(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [Integer] 
  # @scope class
  attach_function :udev_device_get_devnum, :udev_device_get_devnum, [UdevDevice], :ulong
  
  # (Not documented)
  # 
  # @method udev_device_get_action(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [String] 
  # @scope class
  attach_function :udev_device_get_action, :udev_device_get_action, [UdevDevice], :string
  
  # (Not documented)
  # 
  # @method udev_device_get_seqnum(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [Integer] 
  # @scope class
  attach_function :udev_device_get_seqnum, :udev_device_get_seqnum, [UdevDevice], :ulong_long
  
  # (Not documented)
  # 
  # @method udev_device_get_usec_since_initialized(udev_device)
  # @param [UdevDevice] udev_device 
  # @return [Integer] 
  # @scope class
  attach_function :udev_device_get_usec_since_initialized, :udev_device_get_usec_since_initialized, [UdevDevice], :ulong_long
  
  # (Not documented)
  # 
  # @method udev_device_get_sysattr_value(udev_device, sysattr)
  # @param [UdevDevice] udev_device 
  # @param [String] sysattr 
  # @return [String] 
  # @scope class
  attach_function :udev_device_get_sysattr_value, :udev_device_get_sysattr_value, [UdevDevice, :string], :string
  
  # (Not documented)
  # 
  # @method udev_device_set_sysattr_value(udev_device, sysattr, value)
  # @param [UdevDevice] udev_device 
  # @param [String] sysattr 
  # @param [String] value 
  # @return [Integer] 
  # @scope class
  attach_function :udev_device_set_sysattr_value, :udev_device_set_sysattr_value, [UdevDevice, :string, :string], :int
  
  # (Not documented)
  # 
  # @method udev_device_has_tag(udev_device, tag)
  # @param [UdevDevice] udev_device 
  # @param [String] tag 
  # @return [Integer] 
  # @scope class
  attach_function :udev_device_has_tag, :udev_device_has_tag, [UdevDevice, :string], :int
  
  # udev_monitor
  # 
  # access to kernel uevents and udev events
  module UdevMonitorWrappers
    # @return [UdevMonitor] 
    def ref()
      UdevMonitor.new Libudev.udev_monitor_ref(self)
    end
    
    # @return [UdevMonitor] 
    def unref()
      UdevMonitor.new Libudev.udev_monitor_unref(self)
    end
    
    # @return [Udev] 
    def get_udev()
      Udev.new Libudev.udev_monitor_get_udev(self)
    end
    
    # @return [Integer] 
    def enable_receiving()
      Libudev.udev_monitor_enable_receiving(self)
    end
    
    # @param [Integer] size 
    # @return [Integer] 
    def set_receive_buffer_size(size)
      Libudev.udev_monitor_set_receive_buffer_size(self, size)
    end
    
    # @return [Integer] 
    def get_fd()
      Libudev.udev_monitor_get_fd(self)
    end
    
    # @return [UdevDevice] 
    def receive_device()
      UdevDevice.new Libudev.udev_monitor_receive_device(self)
    end
    
    # @param [String] subsystem 
    # @param [String] devtype 
    # @return [Integer] 
    def filter_add_match_subsystem_devtype(subsystem, devtype)
      Libudev.udev_monitor_filter_add_match_subsystem_devtype(self, subsystem, devtype)
    end
    
    # @param [String] tag 
    # @return [Integer] 
    def filter_add_match_tag(tag)
      Libudev.udev_monitor_filter_add_match_tag(self, tag)
    end
    
    # @return [Integer] 
    def filter_update()
      Libudev.udev_monitor_filter_update(self)
    end
    
    # @return [Integer] 
    def filter_remove()
      Libudev.udev_monitor_filter_remove(self)
    end
  end
  
  class UdevMonitor < FFI::Struct
    include UdevMonitorWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # @method udev_monitor_ref(udev_monitor)
  # @param [UdevMonitor] udev_monitor 
  # @return [UdevMonitor] 
  # @scope class
  attach_function :udev_monitor_ref, :udev_monitor_ref, [UdevMonitor], UdevMonitor
  
  # (Not documented)
  # 
  # @method udev_monitor_unref(udev_monitor)
  # @param [UdevMonitor] udev_monitor 
  # @return [UdevMonitor] 
  # @scope class
  attach_function :udev_monitor_unref, :udev_monitor_unref, [UdevMonitor], UdevMonitor
  
  # (Not documented)
  # 
  # @method udev_monitor_get_udev(udev_monitor)
  # @param [UdevMonitor] udev_monitor 
  # @return [Udev] 
  # @scope class
  attach_function :udev_monitor_get_udev, :udev_monitor_get_udev, [UdevMonitor], Udev
  
  # kernel and udev generated events over netlink
  # 
  # @method udev_monitor_new_from_netlink(udev, name)
  # @param [Udev] udev 
  # @param [String] name 
  # @return [UdevMonitor] 
  # @scope class
  attach_function :udev_monitor_new_from_netlink, :udev_monitor_new_from_netlink, [Udev, :string], UdevMonitor
  
  # bind socket
  # 
  # @method udev_monitor_enable_receiving(udev_monitor)
  # @param [UdevMonitor] udev_monitor 
  # @return [Integer] 
  # @scope class
  attach_function :udev_monitor_enable_receiving, :udev_monitor_enable_receiving, [UdevMonitor], :int
  
  # (Not documented)
  # 
  # @method udev_monitor_set_receive_buffer_size(udev_monitor, size)
  # @param [UdevMonitor] udev_monitor 
  # @param [Integer] size 
  # @return [Integer] 
  # @scope class
  attach_function :udev_monitor_set_receive_buffer_size, :udev_monitor_set_receive_buffer_size, [UdevMonitor, :int], :int
  
  # (Not documented)
  # 
  # @method udev_monitor_get_fd(udev_monitor)
  # @param [UdevMonitor] udev_monitor 
  # @return [Integer] 
  # @scope class
  attach_function :udev_monitor_get_fd, :udev_monitor_get_fd, [UdevMonitor], :int
  
  # (Not documented)
  # 
  # @method udev_monitor_receive_device(udev_monitor)
  # @param [UdevMonitor] udev_monitor 
  # @return [UdevDevice] 
  # @scope class
  attach_function :udev_monitor_receive_device, :udev_monitor_receive_device, [UdevMonitor], UdevDevice
  
  # in-kernel socket filters to select messages that get delivered to a listener
  # 
  # @method udev_monitor_filter_add_match_subsystem_devtype(udev_monitor, subsystem, devtype)
  # @param [UdevMonitor] udev_monitor 
  # @param [String] subsystem 
  # @param [String] devtype 
  # @return [Integer] 
  # @scope class
  attach_function :udev_monitor_filter_add_match_subsystem_devtype, :udev_monitor_filter_add_match_subsystem_devtype, [UdevMonitor, :string, :string], :int
  
  # (Not documented)
  # 
  # @method udev_monitor_filter_add_match_tag(udev_monitor, tag)
  # @param [UdevMonitor] udev_monitor 
  # @param [String] tag 
  # @return [Integer] 
  # @scope class
  attach_function :udev_monitor_filter_add_match_tag, :udev_monitor_filter_add_match_tag, [UdevMonitor, :string], :int
  
  # (Not documented)
  # 
  # @method udev_monitor_filter_update(udev_monitor)
  # @param [UdevMonitor] udev_monitor 
  # @return [Integer] 
  # @scope class
  attach_function :udev_monitor_filter_update, :udev_monitor_filter_update, [UdevMonitor], :int
  
  # (Not documented)
  # 
  # @method udev_monitor_filter_remove(udev_monitor)
  # @param [UdevMonitor] udev_monitor 
  # @return [Integer] 
  # @scope class
  attach_function :udev_monitor_filter_remove, :udev_monitor_filter_remove, [UdevMonitor], :int
  
  # udev_enumerate
  # 
  # search sysfs for specific devices and provide a sorted list
  module UdevEnumerateWrappers
    # @return [UdevEnumerate] 
    def ref()
      UdevEnumerate.new Libudev.udev_enumerate_ref(self)
    end
    
    # @return [UdevEnumerate] 
    def unref()
      UdevEnumerate.new Libudev.udev_enumerate_unref(self)
    end
    
    # @return [Udev] 
    def get_udev()
      Udev.new Libudev.udev_enumerate_get_udev(self)
    end
    
    # @param [String] subsystem 
    # @return [Integer] 
    def add_match_subsystem(subsystem)
      Libudev.udev_enumerate_add_match_subsystem(self, subsystem)
    end
    
    # @param [String] subsystem 
    # @return [Integer] 
    def add_nomatch_subsystem(subsystem)
      Libudev.udev_enumerate_add_nomatch_subsystem(self, subsystem)
    end
    
    # @param [String] sysattr 
    # @param [String] value 
    # @return [Integer] 
    def add_match_sysattr(sysattr, value)
      Libudev.udev_enumerate_add_match_sysattr(self, sysattr, value)
    end
    
    # @param [String] sysattr 
    # @param [String] value 
    # @return [Integer] 
    def add_nomatch_sysattr(sysattr, value)
      Libudev.udev_enumerate_add_nomatch_sysattr(self, sysattr, value)
    end
    
    # @param [String] property 
    # @param [String] value 
    # @return [Integer] 
    def add_match_property(property, value)
      Libudev.udev_enumerate_add_match_property(self, property, value)
    end
    
    # @param [String] sysname 
    # @return [Integer] 
    def add_match_sysname(sysname)
      Libudev.udev_enumerate_add_match_sysname(self, sysname)
    end
    
    # @param [String] tag 
    # @return [Integer] 
    def add_match_tag(tag)
      Libudev.udev_enumerate_add_match_tag(self, tag)
    end
    
    # @param [UdevDevice] parent 
    # @return [Integer] 
    def add_match_parent(parent)
      Libudev.udev_enumerate_add_match_parent(self, parent)
    end
    
    # @return [Integer] 
    def add_match_is_initialized()
      Libudev.udev_enumerate_add_match_is_initialized(self)
    end
    
    # @param [String] syspath 
    # @return [Integer] 
    def add_syspath(syspath)
      Libudev.udev_enumerate_add_syspath(self, syspath)
    end
    
    # @return [Integer] 
    def scan_devices()
      Libudev.udev_enumerate_scan_devices(self)
    end
    
    # @return [Integer] 
    def scan_subsystems()
      Libudev.udev_enumerate_scan_subsystems(self)
    end
    
    # @return [UdevListEntry] 
    def get_list_entry()
      UdevListEntry.new Libudev.udev_enumerate_get_list_entry(self)
    end
  end
  
  class UdevEnumerate < FFI::Struct
    include UdevEnumerateWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # @method udev_enumerate_ref(udev_enumerate)
  # @param [UdevEnumerate] udev_enumerate 
  # @return [UdevEnumerate] 
  # @scope class
  attach_function :udev_enumerate_ref, :udev_enumerate_ref, [UdevEnumerate], UdevEnumerate
  
  # (Not documented)
  # 
  # @method udev_enumerate_unref(udev_enumerate)
  # @param [UdevEnumerate] udev_enumerate 
  # @return [UdevEnumerate] 
  # @scope class
  attach_function :udev_enumerate_unref, :udev_enumerate_unref, [UdevEnumerate], UdevEnumerate
  
  # (Not documented)
  # 
  # @method udev_enumerate_get_udev(udev_enumerate)
  # @param [UdevEnumerate] udev_enumerate 
  # @return [Udev] 
  # @scope class
  attach_function :udev_enumerate_get_udev, :udev_enumerate_get_udev, [UdevEnumerate], Udev
  
  # (Not documented)
  # 
  # @method udev_enumerate_new(udev)
  # @param [Udev] udev 
  # @return [UdevEnumerate] 
  # @scope class
  attach_function :udev_enumerate_new, :udev_enumerate_new, [Udev], UdevEnumerate
  
  # device properties filter
  # 
  # @method udev_enumerate_add_match_subsystem(udev_enumerate, subsystem)
  # @param [UdevEnumerate] udev_enumerate 
  # @param [String] subsystem 
  # @return [Integer] 
  # @scope class
  attach_function :udev_enumerate_add_match_subsystem, :udev_enumerate_add_match_subsystem, [UdevEnumerate, :string], :int
  
  # (Not documented)
  # 
  # @method udev_enumerate_add_nomatch_subsystem(udev_enumerate, subsystem)
  # @param [UdevEnumerate] udev_enumerate 
  # @param [String] subsystem 
  # @return [Integer] 
  # @scope class
  attach_function :udev_enumerate_add_nomatch_subsystem, :udev_enumerate_add_nomatch_subsystem, [UdevEnumerate, :string], :int
  
  # (Not documented)
  # 
  # @method udev_enumerate_add_match_sysattr(udev_enumerate, sysattr, value)
  # @param [UdevEnumerate] udev_enumerate 
  # @param [String] sysattr 
  # @param [String] value 
  # @return [Integer] 
  # @scope class
  attach_function :udev_enumerate_add_match_sysattr, :udev_enumerate_add_match_sysattr, [UdevEnumerate, :string, :string], :int
  
  # (Not documented)
  # 
  # @method udev_enumerate_add_nomatch_sysattr(udev_enumerate, sysattr, value)
  # @param [UdevEnumerate] udev_enumerate 
  # @param [String] sysattr 
  # @param [String] value 
  # @return [Integer] 
  # @scope class
  attach_function :udev_enumerate_add_nomatch_sysattr, :udev_enumerate_add_nomatch_sysattr, [UdevEnumerate, :string, :string], :int
  
  # (Not documented)
  # 
  # @method udev_enumerate_add_match_property(udev_enumerate, property, value)
  # @param [UdevEnumerate] udev_enumerate 
  # @param [String] property 
  # @param [String] value 
  # @return [Integer] 
  # @scope class
  attach_function :udev_enumerate_add_match_property, :udev_enumerate_add_match_property, [UdevEnumerate, :string, :string], :int
  
  # (Not documented)
  # 
  # @method udev_enumerate_add_match_sysname(udev_enumerate, sysname)
  # @param [UdevEnumerate] udev_enumerate 
  # @param [String] sysname 
  # @return [Integer] 
  # @scope class
  attach_function :udev_enumerate_add_match_sysname, :udev_enumerate_add_match_sysname, [UdevEnumerate, :string], :int
  
  # (Not documented)
  # 
  # @method udev_enumerate_add_match_tag(udev_enumerate, tag)
  # @param [UdevEnumerate] udev_enumerate 
  # @param [String] tag 
  # @return [Integer] 
  # @scope class
  attach_function :udev_enumerate_add_match_tag, :udev_enumerate_add_match_tag, [UdevEnumerate, :string], :int
  
  # (Not documented)
  # 
  # @method udev_enumerate_add_match_parent(udev_enumerate, parent)
  # @param [UdevEnumerate] udev_enumerate 
  # @param [UdevDevice] parent 
  # @return [Integer] 
  # @scope class
  attach_function :udev_enumerate_add_match_parent, :udev_enumerate_add_match_parent, [UdevEnumerate, UdevDevice], :int
  
  # (Not documented)
  # 
  # @method udev_enumerate_add_match_is_initialized(udev_enumerate)
  # @param [UdevEnumerate] udev_enumerate 
  # @return [Integer] 
  # @scope class
  attach_function :udev_enumerate_add_match_is_initialized, :udev_enumerate_add_match_is_initialized, [UdevEnumerate], :int
  
  # (Not documented)
  # 
  # @method udev_enumerate_add_syspath(udev_enumerate, syspath)
  # @param [UdevEnumerate] udev_enumerate 
  # @param [String] syspath 
  # @return [Integer] 
  # @scope class
  attach_function :udev_enumerate_add_syspath, :udev_enumerate_add_syspath, [UdevEnumerate, :string], :int
  
  # run enumeration with active filters
  # 
  # @method udev_enumerate_scan_devices(udev_enumerate)
  # @param [UdevEnumerate] udev_enumerate 
  # @return [Integer] 
  # @scope class
  attach_function :udev_enumerate_scan_devices, :udev_enumerate_scan_devices, [UdevEnumerate], :int
  
  # (Not documented)
  # 
  # @method udev_enumerate_scan_subsystems(udev_enumerate)
  # @param [UdevEnumerate] udev_enumerate 
  # @return [Integer] 
  # @scope class
  attach_function :udev_enumerate_scan_subsystems, :udev_enumerate_scan_subsystems, [UdevEnumerate], :int
  
  # return device list
  # 
  # @method udev_enumerate_get_list_entry(udev_enumerate)
  # @param [UdevEnumerate] udev_enumerate 
  # @return [UdevListEntry] 
  # @scope class
  attach_function :udev_enumerate_get_list_entry, :udev_enumerate_get_list_entry, [UdevEnumerate], UdevListEntry
  
  # udev_queue
  # 
  # access to the currently running udev events
  module UdevQueueWrappers
    # @return [UdevQueue] 
    def ref()
      UdevQueue.new Libudev.udev_queue_ref(self)
    end
    
    # @return [UdevQueue] 
    def unref()
      UdevQueue.new Libudev.udev_queue_unref(self)
    end
    
    # @return [Udev] 
    def get_udev()
      Udev.new Libudev.udev_queue_get_udev(self)
    end
    
    # @return [Integer] 
    def get_kernel_seqnum()
      Libudev.udev_queue_get_kernel_seqnum(self)
    end
    
    # @return [Integer] 
    def get_udev_seqnum()
      Libudev.udev_queue_get_udev_seqnum(self)
    end
    
    # @return [Integer] 
    def get_udev_is_active()
      Libudev.udev_queue_get_udev_is_active(self)
    end
    
    # @return [Integer] 
    def get_queue_is_empty()
      Libudev.udev_queue_get_queue_is_empty(self)
    end
    
    # @param [Integer] seqnum 
    # @return [Integer] 
    def get_seqnum_is_finished(seqnum)
      Libudev.udev_queue_get_seqnum_is_finished(self, seqnum)
    end
    
    # @param [Integer] start 
    # @param [Integer] end_ 
    # @return [Integer] 
    def get_seqnum_sequence_is_finished(start, end_)
      Libudev.udev_queue_get_seqnum_sequence_is_finished(self, start, end_)
    end
    
    # @return [Integer] 
    def get_fd()
      Libudev.udev_queue_get_fd(self)
    end
    
    # @return [Integer] 
    def flush()
      Libudev.udev_queue_flush(self)
    end
    
    # @return [UdevListEntry] 
    def get_queued_list_entry()
      UdevListEntry.new Libudev.udev_queue_get_queued_list_entry(self)
    end
  end
  
  class UdevQueue < FFI::Struct
    include UdevQueueWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # @method udev_queue_ref(udev_queue)
  # @param [UdevQueue] udev_queue 
  # @return [UdevQueue] 
  # @scope class
  attach_function :udev_queue_ref, :udev_queue_ref, [UdevQueue], UdevQueue
  
  # (Not documented)
  # 
  # @method udev_queue_unref(udev_queue)
  # @param [UdevQueue] udev_queue 
  # @return [UdevQueue] 
  # @scope class
  attach_function :udev_queue_unref, :udev_queue_unref, [UdevQueue], UdevQueue
  
  # (Not documented)
  # 
  # @method udev_queue_get_udev(udev_queue)
  # @param [UdevQueue] udev_queue 
  # @return [Udev] 
  # @scope class
  attach_function :udev_queue_get_udev, :udev_queue_get_udev, [UdevQueue], Udev
  
  # (Not documented)
  # 
  # @method udev_queue_new(udev)
  # @param [Udev] udev 
  # @return [UdevQueue] 
  # @scope class
  attach_function :udev_queue_new, :udev_queue_new, [Udev], UdevQueue
  
  # (Not documented)
  # 
  # @method udev_queue_get_kernel_seqnum(udev_queue)
  # @param [UdevQueue] udev_queue 
  # @return [Integer] 
  # @scope class
  attach_function :udev_queue_get_kernel_seqnum, :udev_queue_get_kernel_seqnum, [UdevQueue], :ulong_long
  
  # (Not documented)
  # 
  # @method udev_queue_get_udev_seqnum(udev_queue)
  # @param [UdevQueue] udev_queue 
  # @return [Integer] 
  # @scope class
  attach_function :udev_queue_get_udev_seqnum, :udev_queue_get_udev_seqnum, [UdevQueue], :ulong_long
  
  # (Not documented)
  # 
  # @method udev_queue_get_udev_is_active(udev_queue)
  # @param [UdevQueue] udev_queue 
  # @return [Integer] 
  # @scope class
  attach_function :udev_queue_get_udev_is_active, :udev_queue_get_udev_is_active, [UdevQueue], :int
  
  # (Not documented)
  # 
  # @method udev_queue_get_queue_is_empty(udev_queue)
  # @param [UdevQueue] udev_queue 
  # @return [Integer] 
  # @scope class
  attach_function :udev_queue_get_queue_is_empty, :udev_queue_get_queue_is_empty, [UdevQueue], :int
  
  # (Not documented)
  # 
  # @method udev_queue_get_seqnum_is_finished(udev_queue, seqnum)
  # @param [UdevQueue] udev_queue 
  # @param [Integer] seqnum 
  # @return [Integer] 
  # @scope class
  attach_function :udev_queue_get_seqnum_is_finished, :udev_queue_get_seqnum_is_finished, [UdevQueue, :ulong_long], :int
  
  # (Not documented)
  # 
  # @method udev_queue_get_seqnum_sequence_is_finished(udev_queue, start, end_)
  # @param [UdevQueue] udev_queue 
  # @param [Integer] start 
  # @param [Integer] end_ 
  # @return [Integer] 
  # @scope class
  attach_function :udev_queue_get_seqnum_sequence_is_finished, :udev_queue_get_seqnum_sequence_is_finished, [UdevQueue, :ulong_long, :ulong_long], :int
  
  # (Not documented)
  # 
  # @method udev_queue_get_fd(udev_queue)
  # @param [UdevQueue] udev_queue 
  # @return [Integer] 
  # @scope class
  attach_function :udev_queue_get_fd, :udev_queue_get_fd, [UdevQueue], :int
  
  # (Not documented)
  # 
  # @method udev_queue_flush(udev_queue)
  # @param [UdevQueue] udev_queue 
  # @return [Integer] 
  # @scope class
  attach_function :udev_queue_flush, :udev_queue_flush, [UdevQueue], :int
  
  # (Not documented)
  # 
  # @method udev_queue_get_queued_list_entry(udev_queue)
  # @param [UdevQueue] udev_queue 
  # @return [UdevListEntry] 
  # @scope class
  attach_function :udev_queue_get_queued_list_entry, :udev_queue_get_queued_list_entry, [UdevQueue], UdevListEntry
  
  # udev_hwdb
  # 
  # access to the static hardware properties database
  module UdevHwdbWrappers
    # @return [UdevHwdb] 
    def ref()
      UdevHwdb.new Libudev.udev_hwdb_ref(self)
    end
    
    # @return [UdevHwdb] 
    def unref()
      UdevHwdb.new Libudev.udev_hwdb_unref(self)
    end
    
    # @param [String] modalias 
    # @param [Integer] flags 
    # @return [UdevListEntry] 
    def get_properties_list_entry(modalias, flags)
      UdevListEntry.new Libudev.udev_hwdb_get_properties_list_entry(self, modalias, flags)
    end
  end
  
  class UdevHwdb < FFI::Struct
    include UdevHwdbWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # @method udev_hwdb_new(udev)
  # @param [Udev] udev 
  # @return [UdevHwdb] 
  # @scope class
  attach_function :udev_hwdb_new, :udev_hwdb_new, [Udev], UdevHwdb
  
  # (Not documented)
  # 
  # @method udev_hwdb_ref(hwdb)
  # @param [UdevHwdb] hwdb 
  # @return [UdevHwdb] 
  # @scope class
  attach_function :udev_hwdb_ref, :udev_hwdb_ref, [UdevHwdb], UdevHwdb
  
  # (Not documented)
  # 
  # @method udev_hwdb_unref(hwdb)
  # @param [UdevHwdb] hwdb 
  # @return [UdevHwdb] 
  # @scope class
  attach_function :udev_hwdb_unref, :udev_hwdb_unref, [UdevHwdb], UdevHwdb
  
  # (Not documented)
  # 
  # @method udev_hwdb_get_properties_list_entry(hwdb, modalias, flags)
  # @param [UdevHwdb] hwdb 
  # @param [String] modalias 
  # @param [Integer] flags 
  # @return [UdevListEntry] 
  # @scope class
  attach_function :udev_hwdb_get_properties_list_entry, :udev_hwdb_get_properties_list_entry, [UdevHwdb, :string, :uint], UdevListEntry
  
  # udev_util
  # 
  # udev specific utilities
  # 
  # @method udev_util_encode_string(str, str_enc, len)
  # @param [String] str 
  # @param [String] str_enc 
  # @param [Integer] len 
  # @return [Integer] 
  # @scope class
  attach_function :udev_util_encode_string, :udev_util_encode_string, [:string, :string, :ulong], :int
  
end
